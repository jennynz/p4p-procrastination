linn[[10]]
dim(linn)
log.fil
log.file
readLines(log.file)
log.file <- file(paste(path,"VTshapes/text.txt",sep = "/"), open = 'r')
linn <-readLines(log.file)
linn
linn[1]
linn[2]
log.file <- file(paste(path,"VTshapes/text.tex",sep = "/"), open = 'r')
linn <-readLines(log.file)
log.file <- file(paste(path,"VTshapes/test.tex",sep = "/"), open = 'r')
linn <-readLines(log.file)
linn
path <<- "/media/jenny/JENNY 021 265 8811/Coding/2. In Progress/P4P Infographic"
log.file <- file(paste(path,"projectlog.txt",sep = "/"), open = 'r')
log.file
linn <-readLines(log.file)
linn
linn[1000]
length(linn)
linn[962]
grep("\section*{", linn[962])
grep("section*{", linn[962])
grep("\\section*{", linn[962])
grep("\\section*", linn[962])
grep("Tuesday", linn[962])
grep("\\section[*]", linn[962])
grep("\\section\\*", linn[962])
grep("[\\]section\\*", linn[962])
if (grep("[\\]section\\*", linn[962])) { print('hi')}
linn[962][5:10]
linn[962][1]
linn[962][1][4]
dim(linn[962][1])
length(linn[962])
length(linn[[962])
length(linn[[962]])
length(linn[[962]][1])
length(linn[[962]][1][1])
type(linn[[962]])
typeof(linn[[962]])
typeof(linn[962])
linn[[962]]
linn[962]
date.line <- linn[962]
date.line[4]
length(date.line)
date.line[1][4]
date.line[[4]]
unlist(strsplit(date.line))
unlist(strsplit(date.line), '.')
unlist(strsplit(date.line, '.'))
unlist(strsplit(date.line, ''))
unlist(strsplit(date.line, ''))[10:29]
unlist(strsplit(date.line, ''))[10:20]
unlist(strsplit(date.line, ''))[10:20]a <- 1
a <- 1
a++
3
a += 2
tally.df$shit
tally.df$row.names
tally.df
tally.df["2016-08-14",]
tally.df["2016-08-14","shit"]
tally.df["2016-08-14","shit"] <- 3
tally.df["2016-08-14","shit"]
date <- unlist(strsplit(date.line, ''))[11:20]
date
c(date[7:10], date[5,6], date[0,1])
c(date[7:10], date[5:6], date[0:1])
c(date[7:10], '-', date[4:5], '-', date[0:1])
c(date[7:10], '-', date[4:5], '-', date[1:2])
paste(c(date[7:10], '-', date[4:5], '-', date[1:2]))
paste(date[7:10], '-', date[4:5], '-', date[1:2])
paste(date[7:10], date[4:5], date[1:2], sep = "-")
paste(date[7:10])
paste(date[7:10], sep="")
paste(date[7:10], collapse="")
paste(date[7:10], date[4:5], date[1:2], collapse="")
paste(paste(date[7:10], collapse=""), paste(date[4:5], collapse=""), paste(date[1:2], collapse=""), sep="-")
date <- unlist(strsplit(date.line, ''))[11:20]
y <- paste(date[7:10], collapse="")
m <- paste(date[4:5], collapse="")
d <- paste(date[1:2], collapse="")
date <- paste(y, m, d, sep="-")
paste(paste(date[7:10], collapse=""), paste(date[4:5], collapse=""), paste(date[1:2], collapse=""), sep="-")
rm(date)
if (grep("[\\]section\\*", linn[i])) {
date <- unlist(strsplit(linn[i], ''))[11:20]
y <- paste(date[7:10], collapse="")
m <- paste(date[4:5], collapse="")
d <- paste(date[1:2], collapse="")
date <- paste(y, m, d, sep="-")
}
i = 678
# Update date when /section*{ pattern occurs
if (grep("[\\]section\\*", linn[i])) {
date <- unlist(strsplit(linn[i], ''))[11:20]
y <- paste(date[7:10], collapse="")
m <- paste(date[4:5], collapse="")
d <- paste(date[1:2], collapse="")
date <- paste(y, m, d, sep="-")
}
date
words <- c(good.words, bad.words)
words
linn[i]
words <- c("yay", "week", "Week", "Int")
for (w in words) {
if (grep(w, linn[i])) {
tally.df[date, w] <- tally.df[date, w] + 1
}
}
w
grep(w, linn[i])
if (grep(w, linn[i])) { print('hi')}
typeof(grep(w, linn[i]))
typeof(grepl(w, linn[i]))
grepl(w, linn[i])
for (w in words) {
if (grepl(w, linn[i])) {
tally.df[date, w] <- tally.df[date, w] + 1
}
}
tally.df[date, w]
grepl(w, linn[i])
w
this.line <- linn[i]
this.line
grepl("wee", linn[i])
grepl("week", linn[i])
grepl("int", linn[i])
grepl("Int", linn[i])
grepl("int", linn[i], ignore.case=TRUE)
grepl("wee", linn[i], ignore.case=TRUE)
source('/media/jenny/JENNY 021 265 8811/Coding/2. In Progress/P4P Infographic/word_frequency.R')
source('/media/jenny/JENNY 021 265 8811/Coding/2. In Progress/P4P Infographic/word_frequency.R', echo=TRUE)
tally.df
debugSource('/media/jenny/JENNY 021 265 8811/Coding/2. In Progress/P4P Infographic/word_frequency.R', echo=TRUE)
date
y
source('/media/jenny/JENNY 021 265 8811/Coding/2. In Progress/P4P Infographic/word_frequency.R', echo=TRUE)
source('/media/jenny/JENNY 021 265 8811/Coding/2. In Progress/P4P Infographic/word_frequency.R', echo=TRUE)
tally.df
debugSource('/media/jenny/JENNY 021 265 8811/Coding/2. In Progress/P4P Infographic/word_frequency.R', echo=TRUE)
debugSource('/media/jenny/JENNY 021 265 8811/Coding/2. In Progress/P4P Infographic/word_frequency.R', echo=TRUE)
debugSource('/media/jenny/JENNY 021 265 8811/Coding/2. In Progress/P4P Infographic/word_frequency.R')
debugSource('/media/jenny/JENNY 021 265 8811/Coding/2. In Progress/P4P Infographic/word_frequency.R', echo=TRUE)
debugSource('/media/jenny/JENNY 021 265 8811/Coding/2. In Progress/P4P Infographic/word_frequency.R', echo=TRUE)
i=160
debugSource('/media/jenny/JENNY 021 265 8811/Coding/2. In Progress/P4P Infographic/word_frequency.R', echo=TRUE)
debugSource('/media/jenny/JENNY 021 265 8811/Coding/2. In Progress/P4P Infographic/word_frequency.R', echo=TRUE)
debugSource('/media/jenny/JENNY 021 265 8811/Coding/2. In Progress/P4P Infographic/word_frequency.R', echo=TRUE)
debugSource('/media/jenny/JENNY 021 265 8811/Coding/2. In Progress/P4P Infographic/word_frequency.R', echo=TRUE)
w
this.line
current.date
tally.df[current.date, w]
current.date
tally.df[current.date, w] <- tally.df[current.date, w] + 1
tally.df[current.date, w]
tally.df <- data.frame(matrix(ncol = num.words, nrow = num.days, data = 0))
data.frame(matrix(ncol = 3, nrow =3, data = 0))
debugSource('/media/jenny/JENNY 021 265 8811/Coding/2. In Progress/P4P Infographic/word_frequency.R', echo=TRUE)
tally.df
source('/media/jenny/JENNY 021 265 8811/Coding/2. In Progress/P4P Infographic/word_frequency.R', echo=TRUE)
tally.df
w <- wow
w <- 'wow'
grepl(\\bw\\b, "Wow this is great", ignore.case=T)
grepl("\\bw\\b", "Wow this is great", ignore.case=T)
source('/media/jenny/JENNY 021 265 8811/Coding/2. In Progress/P4P Infographic/word_frequency.R', echo=TRUE)
setwd(path)
write.csv(tally.df, file = "word_frequency.csv")
this.line
length(this.line)
length(this.line)
length(this.line[1[]])
length(this.line[1])
nchar(this.line[1])
chars
this.line.chars <- nchar(this.line[1])
this.line.chars
source('/media/jenny/JENNY 021 265 8811/Coding/2. In Progress/P4P Infographic/word_frequency.R', echo=TRUE)
nchars
nchar
nchar("hello")
source('/media/jenny/JENNY 021 265 8811/Coding/2. In Progress/P4P Infographic/word_frequency.R', echo=TRUE)
source('/media/jenny/JENNY 021 265 8811/Coding/2. In Progress/P4P Infographic/word_frequency.R', echo=TRUE)
source('/media/jenny/JENNY 021 265 8811/Coding/2. In Progress/P4P Infographic/word_frequency.R', echo=TRUE)
linn[28]
this.line <-linn[28]
this.line.chars <- nchar(this.line)
nchae
nchar
chars <- chars + this.line.chars
chars_cumu <- chars_cumu + this.line.chars
chars
chars_cumu
if (grepl("[\\]section\\*", this.line)) {
if (first.day == F) {
# Store all the previous characters from the last day into df
tally.df[current.date, "chars"] <- chars
tally.df[current.date, "chars_cumu"] <- chars_cumu
# Also reset characters counter for next day
chars <- 0
} else {
# Disregard front matter, before first entry
chars <- 0
chars_cumu <- 0
first.day <- F
}
# Onto the next day
current.date <- unlist(strsplit(this.line, ''))[11:20]
y <- paste(current.date[7:10], collapse="")
m <- paste(current.date[4:5], collapse="")
d <- paste(current.date[1:2], collapse="")
current.date <- paste(y, m, d, sep="-")
}
current.date
current.date <- unlist(strsplit(this.line, ''))[11:20]
current.date
this.line <- lin[1442]
this.line <- linn[1442]
this.line
linn[28]
source('/media/jenny/JENNY 021 265 8811/Coding/2. In Progress/P4P Infographic/word_frequency.R', echo=TRUE)
eq(
from=as.POSIXct("2012-1-1 0:00", tz="UTC"),
to=as.POSIXct("2012-1-3 23:00", tz="UTC"),
by="hour"
)
seq(
from=as.POSIXct("2012-1-1 0:00", tz="UTC"),
to=as.POSIXct("2012-1-3 23:00", tz="UTC"),
by="hour"
)
seq(
from=as.POSIXct("0:00", tz="UTC"),
to=as.POSIXct("23:00", tz="UTC"),
by="hour"
)
seq(
from=as.POSIXct("2012-1-1 0:00", tz="UTC"),
to=as.POSIXct("2012-1-1 24:00", tz="UTC"),
by="hour"
)
times <- seq(
from=as.POSIXct("2012-1-1 0:00", tz="UTC"),
to=as.POSIXct("2012-1-1 24:00", tz="UTC"),
by="hour"
)
strftime(times, format="%H:%M:%S")
times <- seq(
from=as.POSIXct("2012-1-1 0:00"),
to=as.POSIXct("2012-1-1 24:00"),
by="hour"
)
strftime(times, format="%H:%M:%S")
)  length(times)
length(times)
times <- seq(
from=as.POSIXct("2012-1-1 0:00"),
to=as.POSIXct("2012-1-1 23:00"),
by="hour"
)
times <- strftime(times, format="%H:%M:%S")
length(times)
git.log
commits.df <- read.csv(file = git.log)
git.log <- file(paste(path,"commits.csv",sep = "/"), open = 'r')
commits.df <- read.csv(file = git.log)
commits.df
# Part IV Project Infographic
# Time of day & number of git commits
rm(list=ls()) # clear workspace
graphics.off() # close all graphics windows
path <<- "/media/jenny/JENNY 021 265 8811/Coding/2. In Progress/P4P Infographic"
setwd(path)
git.log <- file(paste(path,"commits.csv",sep = "/"), open = 'r')
days <- seq(as.Date("2016-04-12"), as.Date("2016-09-21"), by="days")
times <- seq(
from=as.POSIXct("2012-1-1 0:00"),
to=as.POSIXct("2012-1-1 23:00"),
by="hour"
)
times <- strftime(times, format="%H:%M:%S")
tally.df <- data.frame(matrix(ncol = length(times) + 2, nrow = length(days), data = 0))
rownames(tally.df) <- days
colnames(tally.df) <- times
# Download git log in csv format with nicely formatted dates.
# git log --date=iso --pretty=format:'"%h","%an","%ad","%s"' > commits.csv
commits.df <- read.csv(file = git.log)
tally.df
commits.df
commits.df <- read.csv(file = git.log, header = F)
commits.df <- read.csv(file = git.log, header = F)
commits.df <- read.csv(file = git.log, header = FALSE)
git.log
# Part IV Project Infographic
# Time of day & number of git commits
rm(list=ls()) # clear workspace
graphics.off() # close all graphics windows
path <<- "/media/jenny/JENNY 021 265 8811/Coding/2. In Progress/P4P Infographic"
setwd(path)
git.log <- file(paste(path,"commits.csv",sep = "/"), open = 'r')
days <- seq(as.Date("2016-04-12"), as.Date("2016-09-21"), by="days")
times <- seq(
from=as.POSIXct("2012-1-1 0:00"),
to=as.POSIXct("2012-1-1 23:00"),
by="hour"
)
times <- strftime(times, format="%H:%M:%S")
tally.df <- data.frame(matrix(ncol = length(times), nrow = length(days), data = 0))
rownames(tally.df) <- days
colnames(tally.df) <- times
# Download git log in csv format with nicely formatted dates.
# git log --date=iso --pretty=format:'"%h","%an","%ad","%s"' > commits.csv
commits.df <- read.csv(file = git.log, header = FALSE)
commits.df
colnames(commits.df) <- c("time", "message")
head(commits.df)
length(commimts.df)
length(commits.df)
length(commits.df[1])
length(commits.df[[1])
length(commits.df[[1]])
tail(commits.df)
unlist(commits.df[[2]])
unlist(commits.df[[2]])[1]
typeof(unlist(commits.df[[2]])[1])
unlist(commits.df[[2]])[1:3]
unlist(commits.df[[2]])[:]
unlist(commits.df[[2]])[::]
unlist(commits.df[[2]])[]
c(unlist(commits.df[[2]])[])
unlist(commits.df[[2]])[]
write(unlist(commits.df[[2]]), file="commit_messages.txt", ncolumns = 1, append = F)
unlist(commits.df[[2]])
unlist(commits.df[[2,:]])
unlist(commits.df[[:,2]])
unlist(commits.df[[2]])[1]
commits.df[[2]][1]
unlist(commits.df[[2]], recursive = T)
do.call(c, unlist(commits.df[[2]], recursive = F))
do.call(c, unlist(commits.df[[2]], recursive = T))
do.call(c, commits.df[[2]])
typeof(commits.df[[2]])
typeof(commits.df[2])
commits.df[2]
unlist(commits.df[2])
commits.df[2][1]
commits.df[2][2]
lapply(commits.df[2], as.character)
lapply(commits.df[2], as.character)[81]
lapply(commits.df[2], as.character)[1,81]
lapply(commits.df[2], as.character)[80]
length(lapply(commits.df[2], as.character))
lapply(commits.df[2], as.character)[[80]]
unlist(lapply(commits.df[2], as.character))
lapply(commits.df[2], as.character)
write(lapply(commits.df[2], as.character), file="commit_messages.txt", ncolumns = 1, append = F)
View(commits.df)
View(commits.df)
commits.df$message
unlist(commits.df$message)
a<-commits.df$message
b <- as.character(a)
b
b[1]
write(as.character(commits.df$message), file="commit_messages.txt", ncolumns = 1, append = F)
help("write")
text <- readLines(paste(path,"commit_messages.txt",sep = "/"))
text
docs <- Corpus(VectorSource(text))
# Install
install.packages("tm")  # for text mining
install.package("SnowballC") # for text stemming
install.packages("wordcloud") # word-cloud generator
install.packages("RColorBrewer") # color palettes
# Load
library("tm")
library("SnowballC")
library("wordcloud")
library("RColorBrewer")
docs <- Corpus(VectorSource(text))
inspect(docs)
#
toSpace <- content_transformer(function (x , pattern ) gsub(pattern, " ", x))
docs <- tm_map(docs, toSpace, "/")
docs <- tm_map(docs, toSpace, "&")
docs <- tm_map(docs, content_transformer(tolower))
# Remove numbers
docs <- tm_map(docs, removeNumbers)
# Remove english common stopwords
docs <- tm_map(docs, removeWords, stopwords("english"))
# Remove your own stop word
# specify your stopwords as a character vector
docs <- tm_map(docs, removeWords, c("blabla1", "blabla2"))
# Remove punctuations
docs <- tm_map(docs, removePunctuation)
# Eliminate extra white spaces
docs <- tm_map(docs, stripWhitespace)
# Text stemming
# docs <- tm_map(docs, stemDocument)
dtm <- TermDocumentMatrix(docs)
m <- as.matrix(dtm)
v <- sort(rowSums(m),decreasing=TRUE)
d <- data.frame(word = names(v),freq=v)
head(d, 10)
set.seed(1234)
wordcloud(words = d$word, freq = d$freq, min.freq = 1,
max.words=200, random.order=FALSE, rot.per=0.35,
colors=brewer.pal(8, "Dark2"))
word.freq
d
docs <- tm_map(docs, removeWords, c("githubcomjennynz", "blabla2"))
dtm <- TermDocumentMatrix(docs)
m <- as.matrix(dtm)
v <- sort(rowSums(m),decreasing=TRUE)
word.freq <- data.frame(word = names(v),freq=v)
word.freq
set.seed(123)
wordcloud(words = d$word, freq = d$freq, min.freq = 1,
max.words=200, random.order=FALSE, rot.per=0.35,
colors=brewer.pal(8, "Dark2"))
help("wordcloud")
brewer.pal
help("brewer.pal")
wordcloud(words = d$word, freq = d$freq, min.freq = 1,
max.words=200, random.order=FALSE, rot.per=0.35,
colors=brewer.pal(8, "Accent"))
wordcloud(words = d$word, freq = d$freq, min.freq = 1,
max.words=200, random.order=FALSE, rot.per=0.35,
colors=brewer.pal(8, "Paired"))
wordcloud(words = d$word, freq = d$freq, min.freq = 1,
max.words=200, random.order=FALSE, rot.per=0.35,
colors=brewer.pal(12, "Paired"))
wordcloud(words = d$word, freq = d$freq, min.freq = 1,
max.words=200, random.order=FALSE, rot.per=0.35,
colors=brewer.pal(12, "Set3"))
wordcloud(words = d$word, freq = d$freq, min.freq = 1,
max.words=200, random.order=FALSE, rot.per=0.35,
colors=brewer.pal(9, "Set1"))
wordcloud(words = d$word, freq = d$freq, min.freq = 1,
max.words=200, random.order=FALSE, rot.per=0.35,
colors=brewer.pal(8, "Set2"))
wordcloud(words = d$word, freq = d$freq, min.freq = 1,
max.words=200, random.order=FALSE, rot.per=0.35,
colors=brewer.pal(8, "Dark2"))
wordcloud(words = d$word, freq = d$freq, min.freq = 1,
max.words=200, random.order=FALSE, rot.per=0.35,
colors=brewer.pal(8, "Accent"))
commits.df$time
commits.df$time[1]
typeof(commits.df$time[1])
as.character(commits.df$time[1])
times <- as.character(commits.df$time)
times
length(times)
times[1]
times[1][1:10]
times[[1]][1:10]
length(times[1])
length(as.characer(times[1]))
length(as.character(times[1]))
times[1]
times[1,1]
unlist(times[1])
unlist(strsplit(t, ''))
t <- times[1]
unlist(strsplit(t, ''))
unlist(strsplit(t, ''))[1:9]
unlist(strsplit(t, ''))[1:10]
d <- unlist(strsplit(t, ''))[1:10]
d <- paste(d, collapse="")
d
tally.df
tally.df[d]
tally.df[d,]
tally.df[d,t]
t
head(tally.df)
t
times <- seq(
from=as.POSIXct("2012-1-1 0:00"),
to=as.POSIXct("2012-1-1 23:00"),
by="hour"
)
strftime(times, format="%H")
t
h <- unlist(strsplit(t, ''))[12:13]
h <- paste(h, collapse="")
h
t
source('/media/jenny/JENNY 021 265 8811/Coding/2. In Progress/P4P Infographic/commits.R', echo=TRUE)
source('/media/jenny/JENNY 021 265 8811/Coding/2. In Progress/P4P Infographic/commits.R', echo=TRUE)
source('/media/jenny/JENNY 021 265 8811/Coding/2. In Progress/P4P Infographic/commits.R', echo=TRUE)
d <- data.frame(word = names(v),freq=v)
set.seed(123)
wordcloud(words = d$word, freq = d$freq, min.freq = 1,
max.words=200, random.order=FALSE, rot.per=0.35,
colors=brewer.pal(8, "Dark2"))
set.seed(12)
wordcloud(words = d$word, freq = d$freq, min.freq = 1,
max.words=200, random.order=FALSE, rot.per=0.35,
colors=brewer.pal(8, "Dark2"))
source('/media/jenny/JENNY 021 265 8811/Coding/2. In Progress/P4P Infographic/commits.R', echo=TRUE)
source('/media/jenny/JENNY 021 265 8811/Coding/2. In Progress/P4P Infographic/commits.R', echo=TRUE)
